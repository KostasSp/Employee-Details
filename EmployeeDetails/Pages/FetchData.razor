@using EmployeeDetails.Data
@*dependency injection, following SOLID principles*@
@inject HttpClient http

@*loading message until data is fetched from the endpoint*@
@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Position</th>
                <th>Skills</th>
            </tr>
        </thead>
        <tbody>
            @*filtered employees are displayed to their respective pages*@
            @foreach (var employee in result)
            {
                <tr>
                    <td>@employee.Name</td>
                    <td>@employee.Position</td>
                    <td>@employee.Skills</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string URI = "https://developinterviewstorage.blob.core.windows.net/developinterviewcont/Employees.json";
    private IEnumerable<EmployeeProperties>? employees;
    private IEnumerable<EmployeeProperties>? result;
    private string empPosition = "";

    //making use of component parameters to avoid code duplication
    [Parameter]
    public string employeePosition { get; set; } = "";

    private void setEmployeePosition()
    {
        empPosition = employeePosition;
    }

    //perform GET request, and filter the data based on employee position
    protected override async Task OnInitializedAsync()
    {
        try 
        {
            employees = await http.GetFromJsonAsync<IEnumerable<EmployeeProperties>>(URI);
        } 
        catch (Exception ex) 
        {
            Console.WriteLine("Error retrieving data from API: " + ex.Message);
        }
        result = employees?.Where(empl => empl.Position == $"{employeePosition}");
    }
}
